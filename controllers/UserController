const User = require("../models/User");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const transporter = require("../config/nodemailer");
const { jwt_secret } = require("../config/keys.js");

const UserController = {
  //   create(req, res) {
  //     req.body.role = "user";
  //     const password = bcrypt.hashSync(req.body.password, 10);
  //     User.create({ ...req.body, password: password })
  //       .then((user) =>
  //         res.status(201).send({ message: "Usuario creado con Ã©xito", user })
  //       )
  //       .catch(console.error);
  //   },

  async create(req, res) {
    try {
      const hash = bcrypt.hashSync(req.body.password, 10);
      const user = await User.create({
        ...req.body,
        password: hash,
        confirmed: false,
        //role: "user",
      });
      const emailToken = jwt.sign({ email: req.body.email }, jwt_secret, {
        expiresIn: "48h",
      });

    //   const url = "http://localhost:8787/users/confirm/" + emailToken;
    //   await transporter.sendMail({
    //     to: req.body.email,
    //     subject: "Confirm your email",
    //     html: `<h3>Welcome! you are one step closer to registering </h3>
    //   <a href="${url}"> Click para confirmar tu registro</a>`,
    //   });
      res.status(201).send({
        message: "We have sent you an email to confirm your register",
        user,
      });
    } catch (err) {
      console.log(err);
      res.status(500).send({ msg: "error" });
      // err.origin = "User";
      // next(err);
    }
  },

  async getAllUsers(req, res) {
    try {
      const users = await User.find();

      res.send(users);
    } catch (error) {
      console.error(error);
      res.status(500).send(error);
    }
  },
  async getUserById(req, res) {
    try {
      const user = await User.findById(req.params._id);

      res.send(user);
    } catch (error) {
      console.error(error);
    }
  },
  async getUsersByName(req, res) {
    try {
      if (req.params.name.length > 20) {
        return res.status(400).send("Search too long");
      }
      const name = new RegExp(req.params.name, "i");
      const user = await User.find({ name });
      res.send(user);
    } catch (error) {
      console.log(error);
      res.status(500).send(error);
    }
  },
  async delete(req, res) {
    try {
      const user = await User.findByIdAndDelete(req.params._id);
      res.send({ user, message: "User deleted" });
    } catch (error) {
      console.error(error);
      res.status(500).send({
        message: "There was a problem trying to remove the user",
      });
    }
  },
  async update(req, res) {
    try {
      const user = await User.findByIdAndUpdate(req.params._id, req.body, {
        new: true,
      });
      res.send({ message: "User successfully updated", user });
    } catch (error) {
      console.error(error);
    }
  },
  async login(req, res) {
    try {
      const user = await User.findOne({
        email: req.body.email,
      });
      const token = jwt.sign({ _id: user._id }, jwt_secret); //creo el token
      if (user.tokens.length > 4) user.tokens.shift();
      user.tokens.push(token);
      await user.save();
      res.send({ message: "Welcome " + user.name, token });
    } catch (error) {
      console.error(error);
    }
  },
  async confirm(req, res) {
    try {
      const token = req.params.emailToken;
      const payload = jwt.verify(token, jwt_secret);
      const user = await User.findOneAndUpdate(
        {
            email: payload.email,
        },
        { confirmed: true },
        { new: true }
      );
      res.status(201).send("User confirmed");
    } catch (error) {
      console.error(error);
    }
  },
};

module.exports = UserController;
